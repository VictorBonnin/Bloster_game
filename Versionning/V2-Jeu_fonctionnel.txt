import pygame
import sys
import random

# Initialisation de Pygame
pygame.init()

# Charger l'image du personnage
personnage_image = pygame.image.load("D:\\Projet\\A\\personnage.png")
taille_personnage = (100, 100)
personnage_image = pygame.transform.scale(personnage_image, taille_personnage)

personnage_rect = personnage_image.get_rect()

# Définir la vitesse du personnage 
vitesse = 3

# Obtenir les informations sur l'écran
info_ecran = pygame.display.Info()
largeur_ecran, hauteur_ecran = info_ecran.current_w, info_ecran.current_h

# Définir la nouvelle taille de la fenêtre
largeur, hauteur = largeur_ecran, hauteur_ecran
taille_fenetre = (largeur, hauteur)

# Créer la fenêtre
fenetre = pygame.display.set_mode(taille_fenetre)
pygame.display.set_caption("Caca Boudin")

# Classe pour les obstacles
class Obstacle(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("D:\\Projet\\A\\faille2.png")
        self.image = pygame.transform.scale(self.image, (largeur_ecran // 30, hauteur_ecran // 22)) 
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, largeur - self.rect.width)
        self.rect.y = random.randint(0, hauteur - self.rect.height)
        self.vitesse_x = random.randint(1, 5)
        self.vitesse_y = random.randint(-2, 2)  # Ajoutez une vitesse verticale aléatoire

    def update(self):
        self.rect.x += self.vitesse_x
        self.rect.y += self.vitesse_y

        # Réinitialise la position si l'obstacle sort de l'écran
        if self.rect.left > largeur:
            self.rect.right = 0
            self.rect.y = random.randint(0, hauteur - self.rect.height)

# Groupe pour les obstacles
obstacles = pygame.sprite.Group()
for _ in range(12):  # Ajoutez le nombre d'obstacles que vous souhaitez
    obstacle = Obstacle()
    obstacles.add(obstacle)

def afficher_menu():
    menu_font = pygame.font.Font(None, 36)
    menu_options = ["Démarrer le jeu", "Quitter"]

    menu_surface = pygame.Surface(((largeur // 3), (hauteur // 3)))
    menu_surface.set_alpha(200)
    menu_surface.fill((50, 50, 50))

    menu_rect = menu_surface.get_rect(center=(largeur // 2, hauteur // 2))

    fenetre.blit(menu_surface, menu_rect)

    menu_options_rect = []

    for i, option in enumerate(menu_options):
        texte_option = menu_font.render(option, True, (255, 255, 255))
        option_rect = texte_option.get_rect(center=(largeur // 2, hauteur // 2 + i * 40))

        if option_rect.collidepoint(pygame.mouse.get_pos()):
            texte_option = menu_font.render(option, True, (255, 0, 0))

        fenetre.blit(texte_option, option_rect)
        menu_options_rect.append(option_rect)

    return menu_options_rect

def afficher_fenetre_collision():
    dialogue_font = pygame.font.Font(None, 36)
    options_collision = ["Restart",  "Quitter le jeu"]

    dialogue_surface = pygame.Surface(((largeur // 3), (hauteur // 3)))
    dialogue_surface.set_alpha(200)
    dialogue_surface.fill((50, 50, 50))

    dialogue_rect = dialogue_surface.get_rect(center=(largeur // 2, hauteur // 2))

    fenetre.blit(dialogue_surface, dialogue_rect)

    options_rect = []

    for i, option in enumerate(options_collision):
        texte_option = dialogue_font.render(option, True, (255, 255, 255))
        option_rect = texte_option.get_rect(center=(largeur // 2, hauteur // 2 + i * 40))

        if option_rect.collidepoint(pygame.mouse.get_pos()):
            texte_option = dialogue_font.render(option, True, (255, 0, 0))

        fenetre.blit(texte_option, option_rect)
        options_rect.append(option_rect)

    pygame.display.flip()

    return options_rect

# Variable pour le temps écoulé (en secondes)
temps_ecoule = 0

# Obtenir le temps actuel en millisecondes
temps_actuel = pygame.time.get_ticks()

def reinitialiser_jeu():

    global temps_ecoule  
    temps_ecoule = -1  
    # Réinitialiser la position du personnage
    personnage_rect.x = largeur // 2
    personnage_rect.y = hauteur // 2

    # Réinitialiser la position des obstacles
    for obstacle in obstacles:
        obstacle.rect.x = random.randint(0, largeur - obstacle.rect.width)
        obstacle.rect.y = random.randint(0, hauteur - obstacle.rect.height)

# Définir le menu
menu_font = pygame.font.Font(None, 36)
menu_options = ["Paramètres ", "Quitter"]

# Variable pour suivre l'état du menu
menu_affiche = False

# Boucle principale du jeu
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                menu_affiche = not menu_affiche  # Inverse l'état du menu
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:  # Clic gauche de la souris
            if menu_affiche:
                # Vérifier si le clic est sur l'option "Quitter"
                option_rect_quitter = menu_options_rect[1]  # L'index 1 correspond à l'option "Quitter"
                if option_rect_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

    if not menu_affiche:
        # Recalculer la taille du personnage en fonction de la fenêtre
        nouvelle_taille_personnage = (largeur_ecran // 20, hauteur_ecran // 12)
        personnage_image = pygame.transform.scale(personnage_image, nouvelle_taille_personnage)
        personnage_rect.size = nouvelle_taille_personnage

        # Gestion des touches pour déplacer le personnage
        touches = pygame.key.get_pressed()
        if touches[pygame.K_LEFT] and personnage_rect.left > 0:
            personnage_rect.x -= vitesse
        if touches[pygame.K_RIGHT] and personnage_rect.right < largeur:
            personnage_rect.x += vitesse
        if touches[pygame.K_UP] and personnage_rect.top > 0:
            personnage_rect.y -= vitesse
        if touches[pygame.K_DOWN] and personnage_rect.bottom < hauteur:
            personnage_rect.y += vitesse

        # Vérifier les collisions avec les obstacles
        for obstacle in obstacles:
            if personnage_rect.colliderect(obstacle.rect):
                # Collision détectée, afficher la fenêtre de dialogue
                options_rect_collision = afficher_fenetre_collision()

                # Attendre que l'utilisateur fasse un choix
                choix_fait = False
                while not choix_fait:
                    for event_collision in pygame.event.get():
                        if event_collision.type == pygame.MOUSEBUTTONDOWN and event_collision.button == 1:
                            # Vérifier quel choix a été fait
                            for i, option_rect in enumerate(options_rect_collision):
                                if option_rect.collidepoint(event_collision.pos):
                                    if i == 0:
                                        # restart
                                        print("Restart le Bloster")
                                        reinitialiser_jeu()
                                        choix_fait = True
                                    elif i == 1:
                                        # quitter le jeu
                                        pygame.quit()
                                        sys.exit()
                                        
                                    choix_fait = True

    # Mise à jour de l'affichage
    fenetre.fill((0, 0, 0))  # Remplit l'écran avec une couleur de fond (ici, noir)
    fenetre.blit(personnage_image, personnage_rect)

    # Calculer le temps écoulé depuis la dernière mise à jour
    temps_passe = pygame.time.get_ticks() - temps_actuel
    temps_actuel += temps_passe

    # Convertir le temps en secondes
    temps_ecoule += temps_passe / 1000

    # Afficher le temps en jeu
    font_temps = pygame.font.Font(None, 36)
    texte_temps = font_temps.render(f"Temps : {int(temps_ecoule)} s", True, (255, 255, 255))
    rect_temps = texte_temps.get_rect(topleft=(10, 10))
    fenetre.blit(texte_temps, rect_temps)

    if menu_affiche:
        menu_surface = pygame.Surface(((largeur // 3), (hauteur // 3)))
        menu_surface.set_alpha(200)  # Réglage de la transparence du fond du menu
        menu_surface.fill((50, 50, 50))  # Remplit le fond du menu avec une couleur (ici, gris foncé)

        menu_rect = menu_surface.get_rect(center=(largeur // 2, hauteur // 2))

        fenetre.blit(menu_surface, menu_rect)

        # Liste pour stocker les rectangles des options du menu
        menu_options_rect = []

        for i, option in enumerate(menu_options):
            texte_option = menu_font.render(option, True, (255, 255, 255))

            # Effet de survol : changement de couleur
            option_rect = texte_option.get_rect(center=(largeur // 2, hauteur // 2 + i * 40))
            if option_rect.collidepoint(pygame.mouse.get_pos()):
                texte_option = menu_font.render(option, True, (255, 0, 0))  # Texte en rouge lors du survol

            fenetre.blit(texte_option, option_rect)

            # Ajouter le rectangle de l'option à la liste
            menu_options_rect.append(option_rect)

    obstacles.update()
    obstacles.draw(fenetre)

    pygame.display.flip()